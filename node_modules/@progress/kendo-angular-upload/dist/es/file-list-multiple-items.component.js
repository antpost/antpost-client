var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Input, Component } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { FileState } from './file-info';
import { FileListItemBase } from './file-list-item-base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
var FileListMultipleItemsComponent = (function (_super) {
    __extends(FileListMultipleItemsComponent, _super);
    function FileListMultipleItemsComponent(localization) {
        var _this = _super.call(this) || this;
        _this.localization = localization;
        return _this;
    }
    /**
     * @hidden
     */
    FileListMultipleItemsComponent.prototype.setFileNameClasses = function (file) {
        return {
            "k-file-name": true,
            "k-file-name-invalid": _super.prototype.fileHasValidationErrors.call(this, file)
        };
    };
    Object.defineProperty(FileListMultipleItemsComponent.prototype, "showProgress", {
        /**
         * @hidden
         */
        get: function () {
            return (this.files[0].state === FileState.Uploading) ? 'active' : 'inactive';
        },
        enumerable: true,
        configurable: true
    });
    FileListMultipleItemsComponent.prototype.ngOnInit = function () {
        this.filesHaveErrors = _super.prototype.filesHaveValidationErrors.call(this, this.files);
    };
    return FileListMultipleItemsComponent;
}(FileListItemBase));
export { FileListMultipleItemsComponent };
FileListMultipleItemsComponent.decorators = [
    { type: Component, args: [{
                animations: [
                    trigger('progressState', [
                        state('active', style({ opacity: 1 })),
                        state('inactive', style({ opacity: 0 })),
                        transition('void => active', style({ opacity: 0 })),
                        transition('inactive => active', style({ opacity: 1 })),
                        transition('active => inactive', animate('1s 2s ease-out'))
                    ])
                ],
                selector: 'kendo-upload-file-list-multiple-items',
                template: "\n      <span class=\"k-progress\" style=\"width: 100%;\" [@progressState]=\"showProgress\"></span>\n      <span *ngIf=\"!filesHaveErrors\" class=\"k-multiple-files-extension-wrapper\">\n        <span class=\"k-file-state\"></span>\n      </span>\n      <span *ngIf=\"filesHaveErrors\" class=\"k-multiple-files-invalid-extension-wrapper\">\n        <span class='k-file-invalid-icon'>!</span>\n        <span class=\"k-file-state\"></span>\n      </span>\n      <span class=\"k-file-name-size-wrapper\">\n        <span *ngFor=\"let file of files\" [ngClass]=\"setFileNameClasses(file)\" [title]=\"file.name\">{{file.name}}</span>\n        <span *ngIf=\"!filesHaveErrors\"\n              class=\"k-file-information\">Total: {{ files.length }} files, {{ getTotalFilesSizeMessage(files) }}</span>\n        <span *ngIf=\"filesHaveErrors\" class=\"k-file-validation-message\">{{ getInvalidFilesMessage() }}</span>\n      </span>\n      <kendo-upload-file-list-item-action-button\n        [file]='files[0]'\n        [disabled]='disabled'\n        [async]='async'>\n      </kendo-upload-file-list-item-action-button>\n    "
            },] },
];
/** @nocollapse */
FileListMultipleItemsComponent.ctorParameters = function () { return [
    { type: LocalizationService, },
]; };
FileListMultipleItemsComponent.propDecorators = {
    'disabled': [{ type: Input },],
    'files': [{ type: Input },],
    'async': [{ type: Input },],
};
